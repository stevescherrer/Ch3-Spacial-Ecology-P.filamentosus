#Initial values for the other parameters
inits = function(){list(
HRx = mean(na.exclude(xyinterp[,1])),           # Position of the center of the HR (longitude, m)
HRy = mean(na.exclude(xyinterp[,2])),           # Position of the center of the HR (latitude, m)
x = xyinterp[,1],                               # Fish position (longitude)
y = xyinterp[,2],                               # Fish position (latitude)
k = runif(1,0,0.01),                            # k value
radius = runif(1,50,1000)                        # radius
)}
# 3.3 Model for JAGS
sink("model.txt")
cat("model {
#Detection probability
for (t in 2:N){                                   # number of P periods (rows of REC)
for (j in 1:R){                                 # Receivers (columns of REC)
REC[t,j]~dbin(p[t,j],detmax)                  # Expected number of detections (conditional to p and detmax)
logit(p[t,j])<-alpha[t]+beta[t]*d[t,j]
#d[t,j]<-sqrt((x[t]-rx[j])^2+(y[t]-ry[j])^2)  # Fish:receiver distance
d[t,j]<-sqrt((mean(x[(t-1):t])-rx[j])^2+(mean(y[(t-1):t])-ry[j])^2)   # Fish:receiver distance
}
}
#moving the fish (movement model)
#initial position
x[1]<-x0
y[1]<-y0
#successive positions
for (t in 1:(N-1)){                               # number of P periods (rows of REC)
tempy[t+1]<-(exp(-k*dt)*(y[t]-HRy))+HRy         # Equation 5 (longitude)
y[t+1]~dnorm(tempy[t+1],tau)                    # tau is the inverse of sd^2
tempx[t+1]<-(exp(-k*dt)*(x[t]-HRx))+HRx         # Equation 5 (latitude)
x[t+1]~dnorm(tempx[t+1],tau)
}
tau<-(2*k)/(ep*(1-exp(-2*k*dt)))                  # Equation 6; tau is the inverse of sd^2
ep<--radius^2*k/log(1-0.95)                       # Equation 7
#priors
HRy~dnorm(0,10E-6)
HRx~ dnorm(0,10E-6)
k~dunif(0,1)#dgamma(0.01,0.01)
radius~dnorm(0,10E-6)
}",fill = TRUE)
sink()
params <- c("k","radius","HRx","HRy")
# MCMC settings
ni <- 5000          # Number of iterations
nt <- 10            # Thinning (one out nt iterations will be kept)
nb <- 10000          # Number of burning iterations
nc <- 3            # Number of chains
results = jags(data.jags, inits, params, "model.txt", n.chains = nc,
n.thin = nt, n.iter = ni, n.burnin = nb,jags.seed = 123)
x
x0
x0 = x[1],                # Initial fish position (at tag-and-release) (longitude, m)
y0 = y[1],                # Initial fish position (at tag-and-release) (latitude, m)
x
y
x = xyinterp[,1],                               # Fish position (longitude)
xyinterp[,1]
x = xyinterp[,1],                               # Fish position (longitude)
inits = function(){list(
HRx = mean(na.exclude(xyinterp[,1])),           # Position of the center of the HR (longitude, m)
HRy = mean(na.exclude(xyinterp[,2])),           # Position of the center of the HR (latitude, m)
x = xyinterp[,1],                               # Fish position (longitude)
y = xyinterp[,2],                               # Fish position (latitude)
k = runif(1,0,0.01),                            # k value
radius = runif(1,50,1000)                        # radius
)}
inits$x
inits()
results = jags(data.jags, inits, params, "model.txt", n.chains = nc,
n.thin = nt, n.iter = ni, n.burnin = nb,jags.seed = 123)
inits
inits()
N
sink("model.txt")
cat("model {
#Detection probability
for (t in 2:N){                                   # number of P periods (rows of REC)
for (j in 1:R){                                 # Receivers (columns of REC)
REC[t,j]~dbin(p[t,j],detmax)                  # Expected number of detections (conditional to p and detmax)
logit(p[t,j])<-alpha[t]+beta[t]*d[t,j]
#d[t,j]<-sqrt((x[t]-rx[j])^2+(y[t]-ry[j])^2)  # Fish:receiver distance
d[t,j]<-sqrt((mean(x[(t-1):t])-rx[j])^2+(mean(y[(t-1):t])-ry[j])^2)   # Fish:receiver distance
}
}
#moving the fish (movement model)
#initial position
x[1]<-x0
y[1]<-y0
#successive positions
for (t in 1:(N-2)){                               # number of P periods (rows of REC)
tempy[t+1]<-(exp(-k*dt)*(y[t]-HRy))+HRy         # Equation 5 (longitude)
y[t+1]~dnorm(tempy[t+1],tau)                    # tau is the inverse of sd^2
tempx[t+1]<-(exp(-k*dt)*(x[t]-HRx))+HRx         # Equation 5 (latitude)
x[t+1]~dnorm(tempx[t+1],tau)
}
tau<-(2*k)/(ep*(1-exp(-2*k*dt)))                  # Equation 6; tau is the inverse of sd^2
ep<--radius^2*k/log(1-0.95)                       # Equation 7
#priors
HRy~dnorm(0,10E-6)
HRx~ dnorm(0,10E-6)
k~dunif(0,1)#dgamma(0.01,0.01)
radius~dnorm(0,10E-6)
}",fill = TRUE)
sink()
results = jags(data.jags, inits, params, "model.txt", n.chains = nc,
n.thin = nt, n.iter = ni, n.burnin = nb,jags.seed = 123)
xyinterp[1,1]=xy0
xyinterp[1,]=xy0
for (i in 2:iterP){
xyinterp[i,1]= sum(RECP[i,]*rx)/sum(RECP[i,])
xyinterp[i,1]= ifelse(is.na(xyinterp[i,1]),xyinterp[(i-1),1],xyinterp[i,1])
xyinterp[i,2]= sum(RECP[i,]*ry)/sum(RECP[i,])
xyinterp[i,2]= ifelse(is.na(xyinterp[i,2])==TRUE,xyinterp[(i-1),2],xyinterp[i,2])
}
xyinterp[1,] = NA
indv_data = vd[vd$tag_id == unique(vd$tag_id)[i], ]
GPS.Points.vd = cbind(indv_data$lon, indv_data$lat)
GPS.Points.vd.Spatial.Data <- SpatialPoints(GPS.Points.vd,
proj4string=CRS("+proj=longlat +ellps=WGS84"))
xy <- (spTransform(GPS.Points.vd.Spatial.Data,
CRS("+proj=utm +north +zone=4 +ellps=WGS84")))
XYP = cbind(as.data.frame(xy), as.Date(indv_data$datetime))
XY = XYP
colnames(XY) = c('x', 'y', 'Day')
colnames(XYP) = c('x','y','Day')
#days = as.numeric(range(XYP[,3])[2] - range(XYP[,3])[1])
days = as.numeric(round(difftime(max(vd$datetime), min(vd$datetime), units = "days")))\
xy0 = xy[1, ]
xy0        # tag-and-release position
x = XYP$x[1]
y = XYP$y[1]
HR = XYP[1, 1:2]
colnames(HR) = c('HRx', 'HRy')
# print(c(i, length(unique(indv_data$station))))
p1 = ggplot(legend=FALSE)+
coord_equal()+labs(title="Simulated fish")+
xlab("Longitude (m)") + ylab("Latitude (m)")+
geom_path(data=XY, aes(x,y,group=Day),color="blue")+          # positions at each dt
geom_path(data=XYP, aes(x,y,group=Day),color="red")+          # positions at each P
geom_point(data=SUR, aes(x,y),col="black")                   # receivers array
geom_point(data=HR, aes(HRx,HRy),col="green",size=I(3))       # HR center
p1
days = as.numeric(round(difftime(max(vd$datetime), min(vd$datetime), units = "days")))
xy0 = xy[1, ]
xy0        # tag-and-release position
x = XYP$x[1]
y = XYP$y[1]
HR = XYP[1, 1:2]
colnames(HR) = c('HRx', 'HRy')
# print(c(i, length(unique(indv_data$station))))
p1 = ggplot(legend=FALSE)+
coord_equal()+labs(title="Simulated fish")+
xlab("Longitude (m)") + ylab("Latitude (m)")+
geom_path(data=XY, aes(x,y,group=Day),color="blue")+          # positions at each dt
geom_path(data=XYP, aes(x,y,group=Day),color="red")+          # positions at each P
geom_point(data=SUR, aes(x,y),col="black")                   # receivers array
geom_point(data=HR, aes(HRx,HRy),col="green",size=I(3))       # HR center
p1
p1 = ggplot(legend=FALSE)+
coord_equal()+labs(title=paste("Movements of fish", vd$tag_id[1])+
xlab("Longitude (m)") + ylab("Latitude (m)")+
geom_path(data=XY, aes(x,y,group=Day),color="blue")+          # positions at each dt
geom_path(data=XYP, aes(x,y,group=Day),color="red")+          # positions at each P
geom_point(data=SUR, aes(x,y),col="black")                   # receivers array
geom_point(data=HR, aes(HRx,HRy),col="green",size=I(3))       # HR center
p1
coord_equal()+labs(title=paste("Movements of fish", vd$tag_id[1]))+
xlab("Longitude (m)") + ylab("Latitude (m)")+
geom_path(data=XY, aes(x,y,group=Day),color="blue")+          # positions at each dt
geom_path(data=XYP, aes(x,y,group=Day),color="red")+          # positions at each P
geom_point(data=SUR, aes(x,y),col="black")                   # receivers array
geom_point(data=HR, aes(HRx,HRy),col="green",size=I(3))       # HR center
p1 = ggplot(legend=FALSE)+
coord_equal()+labs(title=paste("Movements of fish", vd$tag_id[1]))+
xlab("Longitude (m)") + ylab("Latitude (m)")+
geom_path(data=XY, aes(x,y,group=Day),color="blue")+          # positions at each dt
geom_path(data=XYP, aes(x,y,group=Day),color="red")+          # positions at each P
geom_point(data=SUR, aes(x,y),col="black")                   # receivers array
geom_point(data=HR, aes(HRx,HRy),col="green",size=I(3))       # HR center
p1
vd$tag_id[1]
n_periods = ceiling(as.numeric((difftime(time1 = max(as.POSIXct(indv_data$datetime)), time2 = min(as.POSIXct(indv_data$datetime)), units = "mins"))) / P)
timesteps = seq.POSIXt(from = min(as.POSIXct(indv_data$datetime)), by = P*dt, length.out = n_periods+1)
RECP = matrix(data = 0, nrow = length(timesteps), ncol = R)
for(i in 2:length(indv_data$datetime)){ # skip indexing 1 since 1 is tagging location
temp_row = which.max(timesteps >= indv_data$datetime[i])
temp_col = which(as.character(indv_data$station[i]) == unique(as.character(rd$station_name)))
RECP[temp_row, temp_col] = RECP[temp_row, temp_col] + 1
}
RECP
n_periods = ceiling(as.numeric((difftime(time1 = max(as.POSIXct(indv_data$datetime)), time2 = min(as.POSIXct(indv_data$datetime)), units = "mins"))) / P)
p1 = ggplot(legend=FALSE)+
coord_equal()+labs(title=paste("Movements of fish", vd$tag_id[1]))+
xlab("Longitude (m)") + ylab("Latitude (m)")+
geom_path(data=XY, aes(x,y,group=Day),color="blue")+          # positions at each dt
geom_path(data=XYP, aes(x,y,group=Day),color="red")+          # positions at each P
geom_point(data=SUR, aes(x,y),col="black") +                # receivers array
geom_point(data=HR, aes(HRx,HRy),col="green",size=I(3))       # HR center
p1
n_periods = ceiling(as.numeric((difftime(time1 = max(as.POSIXct(indv_data$datetime)), time2 = min(as.POSIXct(indv_data$datetime)), units = "mins"))) / P)
timesteps = seq.POSIXt(from = min(as.POSIXct(indv_data$datetime)), by = P*dt, length.out = n_periods+1)
RECP = matrix(data = 0, nrow = length(timesteps), ncol = R)
for(i in 2:length(indv_data$datetime)){ # skip indexing 1 since 1 is tagging location
temp_row = which.max(timesteps >= indv_data$datetime[i])
temp_col = which(as.character(indv_data$station[i]) == unique(as.character(rd$station_name)))
RECP[temp_row, temp_col] = RECP[temp_row, temp_col] + 1
}
N = dim(RECP)[1]         # Number of P periods
iter = (1*24*60*60) / (dt*P)                            # number of time steps in one day (24 hours of day-time)
iterP = round(iter * days)                              # length of the series
n_periods
n_periods = ceiling(as.numeric((difftime(time1 = max(as.POSIXct(indv_data$datetime)), time2 = min(as.POSIXct(indv_data$datetime)), units = "mins"))) / P)
n_periods
n_periods
as.numeric((difftime(time1 = max(as.POSIXct(indv_data$datetime)), time2 = min(as.POSIXct(indv_data$datetime)), units = "mins"))
)
indv_data$datetime
indv_data = vd[vd$tag_id == unique(vd$tag_id)[i], ]
GPS.Points.vd = cbind(indv_data$lon, indv_data$lat)
GPS.Points.vd.Spatial.Data <- SpatialPoints(GPS.Points.vd,
proj4string=CRS("+proj=longlat +ellps=WGS84"))
xy <- (spTransform(GPS.Points.vd.Spatial.Data,
CRS("+proj=utm +north +zone=4 +ellps=WGS84")))
XYP = cbind(as.data.frame(xy), as.Date(indv_data$datetime))
XY = XYP
colnames(XY) = c('x', 'y', 'Day')
colnames(XYP) = c('x','y','Day')
#days = as.numeric(range(XYP[,3])[2] - range(XYP[,3])[1])
days = as.numeric(round(difftime(max(vd$datetime), min(vd$datetime), units = "days")))
xy0 = xy[1, ]
xy0        # tag-and-release position
x = XYP$x[1]
y = XYP$y[1]
HR = XYP[1, 1:2]
colnames(HR) = c('HRx', 'HRy')
# print(c(i, length(unique(indv_data$station))))
p1 = ggplot(legend=FALSE)+
coord_equal()+labs(title=paste("Movements of fish", indv_data$tag_id[1]))+
xlab("Longitude (m)") + ylab("Latitude (m)")+
geom_path(data=XY, aes(x,y,group=Day),color="blue")+          # positions at each dt
geom_path(data=XYP, aes(x,y,group=Day),color="red")+          # positions at each P
geom_point(data=SUR, aes(x,y),col="black") +                  # receivers array
geom_point(data=HR, aes(HRx,HRy),col="green",size=I(3))       # HR center
p1
#### Building RECP Matrix
# A matrix consisting of the number of detections at each receiver during N timesteps
# Rows = timesteps for analysis
# Columns = receivers
# values = number of detections
# days = ceiling(as.numeric((difftime(time1 = max(as.POSIXct(indv_data$datetime)), time2 = min(as.POSIXct(indv_data$datetime)), units = "days"))))
range(indv_data$datetime)
indv_data
indv_data$datetime
indv_data$datetime[1]
indv_data[1, ]
i
s = 7
s = 7
indv_data = vd[vd$tag_id == unique(vd$tag_id)[s], ]
GPS.Points.vd = cbind(indv_data$lon, indv_data$lat)
GPS.Points.vd.Spatial.Data <- SpatialPoints(GPS.Points.vd,
proj4string=CRS("+proj=longlat +ellps=WGS84"))
xy <- (spTransform(GPS.Points.vd.Spatial.Data,
CRS("+proj=utm +north +zone=4 +ellps=WGS84")))
XYP = cbind(as.data.frame(xy), as.Date(indv_data$datetime))
XY = XYP
colnames(XY) = c('x', 'y', 'Day')
colnames(XYP) = c('x','y','Day')
#days = as.numeric(range(XYP[,3])[2] - range(XYP[,3])[1])
days = as.numeric(round(difftime(max(vd$datetime), min(vd$datetime), units = "days")))
xy0 = xy[1, ]
xy0        # tag-and-release position
x = XYP$x[1]
y = XYP$y[1]
HR = XYP[1, 1:2]
colnames(HR) = c('HRx', 'HRy')
# print(c(i, length(unique(indv_data$station))))
p1 = ggplot(legend=FALSE)+
coord_equal()+labs(title=paste("Movements of fish", indv_data$tag_id[1]))+
xlab("Longitude (m)") + ylab("Latitude (m)")+
geom_path(data=XY, aes(x,y,group=Day),color="blue")+          # positions at each dt
geom_path(data=XYP, aes(x,y,group=Day),color="red")+          # positions at each P
geom_point(data=SUR, aes(x,y),col="black") +                  # receivers array
geom_point(data=HR, aes(HRx,HRy),col="green",size=I(3))       # HR center
p1
#### Building RECP Matrix
# A matrix consisting of the number of detections at each receiver during N timesteps
# Rows = timesteps for analysis
# Columns = receivers
# values = number of detections
# days = ceiling(as.numeric((difftime(time1 = max(as.POSIXct(indv_data$datetime)), time2 = min(as.POSIXct(indv_data$datetime)), units = "days"))))
n_periods = ceiling(as.numeric((difftime(time1 = max(as.POSIXct(indv_data$datetime)), time2 = min(as.POSIXct(indv_data$datetime)), units = "mins"))) / P)
timesteps = seq.POSIXt(from = min(as.POSIXct(indv_data$datetime)), by = P*dt, length.out = n_periods+1)
RECP = matrix(data = 0, nrow = length(timesteps), ncol = R)
for(i in 2:length(indv_data$datetime)){ # skip indexing 1 since 1 is tagging location
temp_row = which.max(timesteps >= indv_data$datetime[i])
temp_col = which(as.character(indv_data$station[i]) == unique(as.character(rd$station_name)))
RECP[temp_row, temp_col] = RECP[temp_row, temp_col] + 1
}
N = dim(RECP)[1]         # Number of P periods
iter = (1*24*60*60) / (dt*P)                            # number of time steps in one day (24 hours of day-time)
iterP = round(iter * days)                              # length of the series
#-------------------------------------------------------------------------
# 3) Estimation of the movement parameters and positions using the SSM
#-------------------------------------------------------------------------
# 3.1 Input
data.jags = list(
dt = P*dt,                # Duration of the period over which the number of detections were summed (seconds)
N = dim(RECP)[1],         # Number of P periods
rx = rx,                  # Receivers position (longitude, m)
ry = ry,                  # Receivers position (latitude, m)
x0 = x[1],                # Initial fish position (at tag-and-release) (longitude, m)
y0 = y[1],                # Initial fish position (at tag-and-release) (latitude, m)
REC = RECP,               # Detection matrix:
#     CELLS: Number of detections over a given time period (P)
#     COLUMNS: Receivers
#     ROWS: Evenly distributed, ordered temporal series
detmax = detmax,          # Maximum number of possible detections (=number of beeps emitted) over the period P
alpha = alphaP,           # alpha value (day specific)
beta = betaP,             # beta value (day specific)
R = R                     # Number of receivers
)
iterP
#-------------------------------------------------------------------------
# 3) Estimation of the movement parameters and positions using the SSM
#-------------------------------------------------------------------------
# 3.1 Input
data.jags = list(
dt = P*dt,                # Duration of the period over which the number of detections were summed (seconds)
N = dim(RECP)[1],         # Number of P periods
rx = rx,                  # Receivers position (longitude, m)
ry = ry,                  # Receivers position (latitude, m)
x0 = x[1],                # Initial fish position (at tag-and-release) (longitude, m)
y0 = y[1],                # Initial fish position (at tag-and-release) (latitude, m)
REC = RECP,               # Detection matrix:
#     CELLS: Number of detections over a given time period (P)
#     COLUMNS: Receivers
#     ROWS: Evenly distributed, ordered temporal series
detmax = detmax,          # Maximum number of possible detections (=number of beeps emitted) over the period P
alpha = alphaP,           # alpha value (day specific)
beta = betaP,             # beta value (day specific)
R = R                     # Number of receivers
)
# 3.2 Initial values
# Initial values for each position is based in the weighted mean algorithm described in [6]
xyinterp = array(NA,dim=c(iterP,2))
xyinterp[1,]=xy0
for (i in 2:iterP){
xyinterp[i,1]= sum(RECP[i,]*rx)/sum(RECP[i,])
xyinterp[i,1]= ifelse(is.na(xyinterp[i,1]),xyinterp[(i-1),1],xyinterp[i,1])
xyinterp[i,2]= sum(RECP[i,]*ry)/sum(RECP[i,])
xyinterp[i,2]= ifelse(is.na(xyinterp[i,2])==TRUE,xyinterp[(i-1),2],xyinterp[i,2])
}
xyinterp[1,] = NA
#Initial values for the other parameters
inits = function(){list(
HRx = mean(na.exclude(xyinterp[,1])),           # Position of the center of the HR (longitude, m)
HRy = mean(na.exclude(xyinterp[,2])),           # Position of the center of the HR (latitude, m)
x = xyinterp[,1],                               # Fish position (longitude)
y = xyinterp[,2],                               # Fish position (latitude)
k = runif(1,0,0.01),                            # k value
radius = runif(1,50,1000)                        # radius
)}
# 3.3 Model for JAGS
sink("model.txt")
cat("model {
#Detection probability
for (t in 2:N){                                   # number of P periods (rows of REC)
for (j in 1:R){                                 # Receivers (columns of REC)
REC[t,j]~dbin(p[t,j],detmax)                  # Expected number of detections (conditional to p and detmax)
logit(p[t,j])<-alpha[t]+beta[t]*d[t,j]
#d[t,j]<-sqrt((x[t]-rx[j])^2+(y[t]-ry[j])^2)  # Fish:receiver distance
d[t,j]<-sqrt((mean(x[(t-1):t])-rx[j])^2+(mean(y[(t-1):t])-ry[j])^2)   # Fish:receiver distance
}
}
#moving the fish (movement model)
#initial position
x[1]<-x0
y[1]<-y0
#successive positions
for (t in 1:(N-1)){                               # number of P periods (rows of REC)
tempy[t+1]<-(exp(-k*dt)*(y[t]-HRy))+HRy         # Equation 5 (longitude)
y[t+1]~dnorm(tempy[t+1],tau)                    # tau is the inverse of sd^2
tempx[t+1]<-(exp(-k*dt)*(x[t]-HRx))+HRx         # Equation 5 (latitude)
x[t+1]~dnorm(tempx[t+1],tau)
}
tau<-(2*k)/(ep*(1-exp(-2*k*dt)))                  # Equation 6; tau is the inverse of sd^2
ep<--radius^2*k/log(1-0.95)                       # Equation 7
#priors
HRy~dnorm(0,10E-6)
HRx~ dnorm(0,10E-6)
k~dunif(0,1)#dgamma(0.01,0.01)
radius~dnorm(0,10E-6)
}",fill = TRUE)
sink()
#3.4 Settings and running JAGS
# Parameters monitored
params <- c("k","radius","HRx","HRy")
# MCMC settings
ni <- 5000          # Number of iterations
nt <- 10            # Thinning (one out nt iterations will be kept)
nb <- 10000          # Number of burning iterations
nc <- 3            # Number of chains
results = jags(data.jags, inits, params, "model.txt", n.chains = nc,
n.thin = nt, n.iter = ni, n.burnin = nb,jags.seed = 123)
init.values[[i]]
rm(list=ls()) # Clear workspace
##### Workspace and Data Setup #####
#### Installing Principle Dependencies
library('ncdf4') # nc_open()
library('marmap') # subsetBathy()
library('lattice') # wireframe()
library('notifyR') # send_push()
#### Setting Up Directories
setwd(results_dir)
gif.dir = create_save_directory('Makapuu Rotating Wireframe Gif')
setwd(gif.dir)
#### Importing Data
nc_bathy_dat <- nc_open('/Users/stephenscherrer/Google Drive/Weng Lab/Personal_Folders/Steve/dissertation work/Acoustic Network Design/Acoustic Web App/src/himbsyn.bathy.v19.grd/himbsyn.bathy.v19.grd')
#### Cleaning up data
## Reclassing ncdf into class bathy
lat <-  ncvar_get(nc_bathy_dat,"lat")
lon <-  ncvar_get(nc_bathy_dat,"lon")
z   <- ncvar_get(nc_bathy_dat, "z")
bathy_mat = matrix(z, byrow = FALSE, nrow = length(lon), dimnames = list(lon, lat))
bathy_mat[is.nan(bathy_mat)] = NA
class(bathy_mat) <- "bathy"
## Subsetting full bathymetry
master_bath = subsetBathy(bathy_mat, x = c(-157.8,-157.51), y = c( 21.2, 21.5), locator = FALSE)
bathymetry = master_bath
#### Animation parameters
deepest_depth = min(bathymetry, na.rm = TRUE) # Deepest Depth in bathy file
shallowest_depth = max(bathymetry, na.rm = TRUE) # Shallowest Depth in bathy file
upper_depth_cutoff = -100 # The upper limit of the bathymetry following removal
lower_depth_cutoff = -400 # The lower limit of the bathymetry following removal
end_pan_down = 70
end_side_pan = 120
start_frame_cut = 35 # The frame number to begin removing bathymetry
end_frame_cut = 75 # The frame number to stop removing bathymetry
start_frame_add = 150 # The frame number to begin readding bathymetry
end_frame_add = 190 # The frame number to stop readding bathymetry
upper_cuts_per_frame = ceiling(abs(max(bathymetry, na.rm = TRUE) - upper_depth_cutoff) / abs(start_frame_cut - end_frame_cut)) # The depth (in m), to remove during each removal frame
lower_cuts_per_frame = ceiling(abs(min(bathymetry, na.rm = TRUE) - lower_depth_cutoff) / abs(start_frame_cut - end_frame_cut)) # The depth (in m), to remove during each removal frame
upper_adds_per_frame = ceiling(abs(max(bathymetry, na.rm = TRUE) - upper_depth_cutoff) / abs(start_frame_add - end_frame_add)) # The depth (in m), to add during each adding frame
lower_adds_per_frame = ceiling(abs(min(bathymetry, na.rm = TRUE) - lower_depth_cutoff) / abs(start_frame_add - end_frame_add)) # The depth (in m), to add during each adding frame
#### Animating GIF
## (Re)setting Loop Counters
cut_bathy_ceiling = max(master_bath, na.rm = TRUE)
cut_bathy_floor = min(master_bath, na.rm = TRUE)
## Producing individual GIF images
for(i in 0:240){
iter_num = NULL
if(i < 10){
iter_num = paste('00', i, sep = "")
}else if(i < 100){
iter_num = paste('0', i, sep = "")
}else{
iter_num = i
}
## Removing a single max and min value (in corners) to keep color scale uniform
bathymetry[1,1] = NA
bathymetry[1,ncol(bathymetry)] = NA
## Removal of bathymetry outside of specified depth range
if(i >= start_frame_cut & i < end_frame_cut & max(bathymetry, na.rm = TRUE) > upper_depth_cutoff){
cut_bathy_ceiling = cut_bathy_ceiling - upper_cuts_per_frame
bathymetry[which(bathymetry > cut_bathy_ceiling)] = NA
}
if(i >= start_frame_cut & i < end_frame_cut & min(bathymetry, na.rm = TRUE) < lower_depth_cutoff){
cut_bathy_floor = cut_bathy_floor + lower_cuts_per_frame
bathymetry[which(bathymetry < cut_bathy_floor)] = NA
}
## Adding back in bathymetry outside of specified depth range
if(i >= start_frame_add & i < end_frame_add & min(bathymetry, na.rm = TRUE) <= upper_depth_cutoff){
cut_bathy_floor = cut_bathy_floor - lower_adds_per_frame
cut_bathy_ceiling = cut_bathy_ceiling + upper_adds_per_frame
bathymetry[which(master_bath >= cut_bathy_floor & master_bath <= cut_bathy_ceiling)] = master_bath[which(master_bath >= cut_bathy_floor & master_bath <= cut_bathy_ceiling)]
}
## Adding a single max and min value (in corners) to keep color scale (and boudning box) consistant across entire animation
bathymetry[1,1] = shallowest_depth
bathymetry[1,ncol(bathymetry)] = deepest_depth
## Animating pan down
if (i <= end_pan_down){
png(paste('makapuu_wireframe_gif_tiltpan_seq_', iter_num, '.png', sep = ""), width = 800, height = 800)
print(wireframe(unclass(bathymetry), shade = TRUE, aspect = c(1/2, 0.1), xlab = "", ylab = "", zlab = "", distance = 0, screen = list(z = -i, y = 0, x = -i), par.settings = list(axis.line = list(col = "transparent"))))
dev.off()
## Animating side pan
}else if (i > end_pan_down & i <= end_side_pan){
png(paste('makapuu_wireframe_gif_tiltpan_seq_', iter_num, '.png', sep = ""), width = 800, height = 800)
print(wireframe(unclass(bathymetry), shade = TRUE, aspect = c(1/2, 0.1), xlab = "", ylab = "", zlab = "", distance = 0, screen = list(z = -i, y = 0, x = -70), par.settings = list(axis.line = list(col = "transparent"))))
dev.off()
## Animating side pan return
}else if (i > end_side_pan){
png(paste('makapuu_wireframe_gif_tiltpan_seq_', iter_num, '.png', sep = ""), width = 800, height = 800)
print(wireframe(unclass(bathymetry), shade = TRUE, aspect = c(1/2, 0.1), xlab = "", ylab = "", zlab = "", distance = 0, screen = list(z = (-240 + i), y = 0, x = -70), par.settings = list(axis.line = list(col = "transparent"))))
dev.off()
}
}
library('RAtmosphere')
##### Running Analysis ######
#### Loading in analysis workspace
load(file.path(project_dir, "workspace_image_updated"))
rm(list=ls()) # Clear workspace
gc()
script_timer = proc.time()
project_dir = getwd()
data_dir = '/Volumes/GoogleDrive/My Drive/Weng Lab/Data/Bottomfish/Oahu Receiver Data Files'
results_dir = paste(project_dir, '/results', sep = "")
# fig.dir = paste(project_dir, '/figures', sep = "")
src_dir = paste(project_dir, '/src', sep = "")
bin_dir = paste(project_dir, '/bin', sep = "")
setwd(project_dir)
savehistory(file=paste(results_dir, 'history.txt'))
